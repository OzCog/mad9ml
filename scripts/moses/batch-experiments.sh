#!/bin/bash

# MOSES Grammar Evolution - Batch Experiment Runner
# Runs multiple MOSES experiments with different configurations

set -e

echo "üß¨ MOSES Grammar Evolution - Batch Experiment Runner"
echo "====================================================="

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RESULTS_DIR="$SCRIPT_DIR/../../moses-experiments"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
EXPERIMENT_DIR="$RESULTS_DIR/batch_$TIMESTAMP"

# Create experiment directory
mkdir -p "$EXPERIMENT_DIR"

echo "üìÅ Experiment directory: $EXPERIMENT_DIR"
echo "‚è∞ Started at: $(date)"

# Experiment configurations
declare -a EXPERIMENTS=(
    "basic --generations 50 --population 20 --objective balanced"
    "performance --generations 75 --population 30 --objective performance"
    "novelty --generations 100 --population 25 --objective novelty"
    "complexity --generations 60 --population 35 --objective complexity"
    "meta_opt --meta-optimize 5 --generations 40 --population 20"
    "multi_run --multi-run 10 --generations 30 --population 15"
)

# Run experiments
for i in "${!EXPERIMENTS[@]}"; do
    IFS=' ' read -ra EXPERIMENT <<< "${EXPERIMENTS[$i]}"
    NAME="${EXPERIMENT[0]}"
    ARGS="${EXPERIMENT[@]:1}"
    
    echo ""
    echo "üî¨ Running experiment $((i+1))/${#EXPERIMENTS[@]}: $NAME"
    echo "   Args: $ARGS"
    
    # Create experiment subdirectory
    EXP_DIR="$EXPERIMENT_DIR/$NAME"
    mkdir -p "$EXP_DIR"
    
    # Run experiment and capture output
    cd "$SCRIPT_DIR/../.."
    echo "$(date): Starting $NAME" >> "$EXP_DIR/experiment.log"
    
    if node scripts/moses/moses-runner.js $ARGS --output "$EXP_DIR" >> "$EXP_DIR/experiment.log" 2>&1; then
        echo "   ‚úÖ $NAME completed successfully"
        echo "$(date): $NAME completed successfully" >> "$EXP_DIR/experiment.log"
    else
        echo "   ‚ùå $NAME failed"
        echo "$(date): $NAME failed" >> "$EXP_DIR/experiment.log"
    fi
    
    # Brief pause between experiments
    sleep 2
done

echo ""
echo "üìä Generating comparative analysis..."

# Generate summary report
SUMMARY_FILE="$EXPERIMENT_DIR/batch_summary.md"
cat > "$SUMMARY_FILE" << EOF
# MOSES Batch Experiment Summary

**Experiment Batch:** $TIMESTAMP  
**Started:** $(date)  
**Total Experiments:** ${#EXPERIMENTS[@]}

## Experiments Conducted

EOF

# Add experiment details to summary
for i in "${!EXPERIMENTS[@]}"; do
    IFS=' ' read -ra EXPERIMENT <<< "${EXPERIMENTS[$i]}"
    NAME="${EXPERIMENT[0]}"
    ARGS="${EXPERIMENT[@]:1}"
    
    echo "### $((i+1)). $NAME" >> "$SUMMARY_FILE"
    echo "**Configuration:** \`$ARGS\`" >> "$SUMMARY_FILE"
    
    if [ -f "$EXPERIMENT_DIR/$NAME/experiment.log" ]; then
        # Extract key metrics from log if available
        if grep -q "completed successfully" "$EXPERIMENT_DIR/$NAME/experiment.log"; then
            echo "**Status:** ‚úÖ Completed" >> "$SUMMARY_FILE"
            
            # Try to extract fitness if available in log
            if grep -q "Best Fitness:" "$EXPERIMENT_DIR/$NAME/experiment.log"; then
                FITNESS=$(grep "Best Fitness:" "$EXPERIMENT_DIR/$NAME/experiment.log" | tail -1 | awk '{print $3}')
                echo "**Best Fitness:** $FITNESS" >> "$SUMMARY_FILE"
            fi
            
            if grep -q "Generations:" "$EXPERIMENT_DIR/$NAME/experiment.log"; then
                GENS=$(grep "Generations:" "$EXPERIMENT_DIR/$NAME/experiment.log" | tail -1 | awk '{print $2}')
                echo "**Generations:** $GENS" >> "$SUMMARY_FILE"
            fi
        else
            echo "**Status:** ‚ùå Failed" >> "$SUMMARY_FILE"
        fi
    else
        echo "**Status:** ‚ö†Ô∏è No log found" >> "$SUMMARY_FILE"
    fi
    
    echo "" >> "$SUMMARY_FILE"
done

# Add analysis section
cat >> "$SUMMARY_FILE" << EOF

## Analysis

This batch experiment tested various MOSES configurations to evaluate:

1. **Basic Performance** - Standard balanced optimization
2. **Performance Focus** - Optimized for maximum fitness
3. **Novelty Focus** - Optimized for diversity and exploration
4. **Complexity Focus** - Optimized for structural complexity
5. **Meta-Optimization** - Parameter self-tuning capabilities
6. **Statistical Robustness** - Multiple run consistency

## Results Location

All detailed results, including evolution logs, statistics, and visualizations, 
are available in the individual experiment directories within:

\`$EXPERIMENT_DIR\`

## Next Steps

1. Review individual experiment reports
2. Compare fitness convergence patterns across objectives
3. Analyze meta-optimization effectiveness
4. Evaluate statistical consistency in multi-run experiments
5. Consider parameter tuning based on results

---
*Generated by MOSES Batch Runner on $(date)*
EOF

echo "üìã Summary report generated: $SUMMARY_FILE"

# Create visualization script
VIZ_SCRIPT="$EXPERIMENT_DIR/visualize_results.py"
cat > "$VIZ_SCRIPT" << 'EOF'
#!/usr/bin/env python3

"""
MOSES Batch Results Visualization
Generates comparative plots for batch experiment results
"""

import os
import json
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

def load_experiment_data(experiment_dir):
    """Load data from experiment directory"""
    data = {}
    
    # Try to load visualization data if available
    viz_file = os.path.join(experiment_dir, 'visualization-data.json')
    if os.path.exists(viz_file):
        with open(viz_file, 'r') as f:
            data = json.load(f)
    
    return data

def plot_comparative_convergence(experiment_dirs, output_file):
    """Plot convergence comparison across experiments"""
    plt.figure(figsize=(15, 10))
    
    for i, (name, exp_dir) in enumerate(experiment_dirs.items()):
        data = load_experiment_data(exp_dir)
        
        if 'convergenceData' in data:
            convergence = data['convergenceData']
            generations = [d['generation'] for d in convergence]
            best_fitness = [d['bestFitness'] for d in convergence]
            
            plt.subplot(2, 3, i + 1)
            plt.plot(generations, best_fitness, linewidth=2)
            plt.title(f'{name.title()} Optimization')
            plt.xlabel('Generation')
            plt.ylabel('Best Fitness')
            plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"Convergence comparison saved: {output_file}")

def main():
    # Find experiment directories
    batch_dir = Path(__file__).parent
    experiment_dirs = {}
    
    for item in batch_dir.iterdir():
        if item.is_dir() and item.name != '__pycache__':
            experiment_dirs[item.name] = item
    
    print(f"Found {len(experiment_dirs)} experiments")
    
    # Generate comparative visualizations
    if experiment_dirs:
        plot_comparative_convergence(experiment_dirs, batch_dir / 'convergence_comparison.png')
    
    print("Visualization complete!")

if __name__ == '__main__':
    main()
EOF

chmod +x "$VIZ_SCRIPT"
echo "üìä Visualization script created: $VIZ_SCRIPT"

echo ""
echo "üéâ Batch experiments completed!"
echo "üìÅ Results directory: $EXPERIMENT_DIR"
echo "üìã Summary report: $SUMMARY_FILE"
echo "üìä Run visualization: python3 $VIZ_SCRIPT"
echo "‚è∞ Finished at: $(date)"

# Optional: Run visualization if Python is available
if command -v python3 &> /dev/null; then
    echo ""
    echo "üé® Generating visualizations..."
    cd "$EXPERIMENT_DIR"
    python3 visualize_results.py
fi